def demo_pick_and_place_with_subprograms():
  modbus_add_signal("192.168.1.20", 255, 0, 3, "gripper_O0")
  modbus_set_signal_update_frequency("gripper_O0", 10)
  modbus_add_signal("192.168.1.20", 255, 1, 3, "gripper_O1")
  modbus_set_signal_update_frequency("gripper_O1", 10)
  modbus_add_signal("192.168.1.20", 255, 2, 3, "gripper_O2")
  modbus_set_signal_update_frequency("gripper_O2", 10)
  modbus_add_signal("192.168.1.20", 255, 0, 2, "gripper_I0")
  modbus_set_signal_update_frequency("gripper_I0", 10)
  modbus_add_signal("192.168.1.20", 255, 1, 2, "gripper_I1")
  modbus_set_signal_update_frequency("gripper_I1", 10)
  set_analog_inputrange(0, 0)
  set_analog_inputrange(1, 0)
  set_analog_inputrange(2, 0)
  set_analog_inputrange(3, 0)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_runstate_outputs([])
  modbus_set_runstate_dependent_choice("gripper_O0",0)
  modbus_set_runstate_dependent_choice("gripper_O1",0)
  modbus_set_runstate_dependent_choice("gripper_O2",0)
  set_payload(3.3)
  set_gravity([0.0, 0.0, 9.82])
  rq_force=0
  varmsg("rq_force",rq_force)
  rq_speed=0
  varmsg("rq_speed",rq_speed)
  $ 35 "SubP_rq_activate_and_wait"
  def SubP_rq_activate_and_wait():
    rq_activate_and_wait()
  end
  $ 37 "SubP_rq_close_and_wait"
  def SubP_rq_close_and_wait():
    rq_close_and_wait()
  end
  $ 39 "SubP_rq_open_and_wait"
  def SubP_rq_open_and_wait():
    rq_open_and_wait()
  end
  $ 41 "SubP_rq_is_object_detected"
  def SubP_rq_is_object_detected():
    rq_is_object_detected()
  end
  $ 43 "SubP_rq_set_force"
  def SubP_rq_set_force():
    rq_set_force(rq_force)
  end
  $ 45 "SubP_rq_set_speed"
  def SubP_rq_set_speed():
    rq_set_speed(rq_speed)
  end
  $ 2 "BeforeStart"
  ################################################################
  ## Script file used to communicate with Robotiq's 3F Gripper 
  ## Version: 2.0.0
  ################################################################
  
  # aliases for the gripper output names
  # those values also represent offsets 
  # in control registers
  rACT = 1
  rMOD = 2
  rGTO = 8
  rATR = 16
  rPOS = 3
  rFOR = 5
  rSPE = 11
  
  # aliases for the gripper input names
  # those values also represent offsets 
  # in control registers
  gPRE = 1
  gACT = 8
  gMOD = 9
  gMOD1 = 9
  gMOD2 = 10
  gFLT = 19
  gFLT1 = 8
  gFLT2 = 9
  gFLT3 = 10
  gFLT4 = 11
  gGTO = 11
  gIMC = 12
  gIMC1 = 12
  gIMC2 = 13
  gSTA = 14
  gSTA1 = 14
  gSTA2 = 15
  
  # send the activation request to the gripper.
  def rq_activate():
  	rq_set_var(rACT,1)
  
      ACT = rq_get_var(gACT)
      while (ACT != 1):
          ACT = rq_get_var(gACT)
      end
  end
  
  # send the activation request to the gripper and
  # wait for its completion.
  def rq_activate_and_wait():
  	rq_activate()
  
  	while(not rq_is_gripper_activated()):
  		# wait for activation completed
  	end
  end
  
  # interrupts the gripper motion.
  def rq_stop():
  	rq_set_var(rGTO,0)
  
      GTO = rq_get_var(gGTO)
      while (GTO != 0):
          GTO = rq_get_var(gGTO)
      end
  end
  
  # resets the activation and auto-release bits.
  def rq_reset():
  	rq_set_var(rATR,0)
  	rq_set_var(rACT,0)
  
      ACT = rq_get_var(gACT)
      while (ACT != 0):
          ACT = rq_get_var(gACT)
      end
  end
  
  # send the auto-release request and wait 
  # for its completion
  def rq_auto_release_and_wait():
  	rq_set_var(rACT,1)
  	rq_set_var(rATR,1)
  
      ACT = rq_get_var(gACT)
      while (ACT != 1):
          ACT = rq_get_var(gACT)
      end
  
  	FLT = rq_get_var(gFLT)
  	while(FLT != 15):
  		FLT = rq_get_var(gFLT)
  	end
  end
  
  # set the force setpoint
  def rq_set_force(force):
  	rq_set_var(rFOR,force)
  end
  
  # set the speed setpoint
  def rq_set_speed(speed):
  	rq_set_var(rSPE,speed)
  end
  
  # send the open request to the gripper
  def rq_open():
  	rq_move(0)
  end
  
  # send the close request to the gripper
  def rq_close():
  	rq_move(255)
  end
  
  # send the open request to the gripper and wait
  # for its completion
  def rq_open_and_wait():
  	rq_move_and_wait(0)
  end
  
  # send the close request to the gripper and wait
  # for its completion
  def rq_close_and_wait():
  	rq_move_and_wait(255)
  end
  
  # send the move request to the position in argument
  def rq_move(pos):
  	rq_set_var(rGTO,0)
  
  	GTO = rq_get_var(gGTO)
  	while (GTO != 0):
  		GTO = rq_get_var(gGTO)
  	end
  
  	rq_set_var(rPOS,pos)
  	
  	PRE = rq_get_var(gPRE)
  	while (PRE != pos):
  		PRE = rq_get_var(gPRE)
  	end
  
  	rq_set_var(rGTO,1)
  
  	while (GTO != 1):
  		GTO = rq_get_var(gGTO)
  	end
  		
  end
  
  # send the move request to the position in argument
  # and wait for its completion
  def rq_move_and_wait(pos):
  	rq_move(pos)
  
  	while (not rq_is_motion_complete()):
  		# wait for motion completed
  		sleep(0.01)
  		sync()
  	end
  end
  
  # send the request to change mode in argument
  def rq_set_mode(value):
  	rq_set_var(rMOD, value)
  
      MOD = rq_get_var(gMOD)
      while (MOD != value):
          MOD = rq_get_var(gMOD)
      end
  end
  
  # send the request to change to the basic mode
  def rq_set_basic_mode():
  	rq_set_mode(0)
  end
  
  # send the request to change to the pinch mode
  def rq_set_pinch_mode():
  	rq_set_mode(1)
  end
  
  # send the request to change to the wide mode
  def rq_set_wide_mode():
  	rq_set_mode(2)
  end
  
  # send the request to change to the scissor mode
  def rq_set_scissor_mode():
  	rq_set_mode(3)
  end
  
  # returns True if the gripper has completed its motion
  # returns False otherwise
  def rq_is_motion_complete():
  	STA = rq_get_var(gSTA)
  
  	if (STA == 0):
  		return False
  	end
  
  	return True
  
  end
  
  # Returns True if the gripper is activated
  def rq_is_gripper_activated():
      IMC = rq_get_var(gIMC)
      
      if (IMC == 3):
          return True
      end
  
      return False
  end
  
  # returns True if an object has been detected
  def rq_is_object_detected():
  	STA = rq_get_var(gSTA)
  
  	if(STA == 1):
  		return True
  	elif(STA == 2):
  		return True
  	else:
  		return False
  	end
  end
  
  # prints in the log window the fault status
  def rq_print_fault_code():
  	fault_status = rq_get_var(gFLT)
  
  	if(fault_status == 0):
  		textmsg("Gripper Fault : ", "No Fault (0x00)")
  	elif (fault_status == 5):
  		textmsg("Gripper Fault : ", "Priority Fault: Action delayed, activation (reactivation) must be completed prior to renewed action (0x05)")
  	elif (fault_status == 6):
  		textmsg("Gripper Fault : ", "Priority Fault: Action delayed, mode change must be completed prior to continuing action (0x06)")
  	elif (fault_status == 7):
  		textmsg("Gripper Fault : ", "Priority Fault: The activation bit must be set prior to action (0x07)")
  	elif (fault_status == 9):
  		textmsg("Gripper Fault : ", "Minor Fault: The communication chip is not ready (may be booting) (0x09)")
  	elif (fault_status == 10):
  		textmsg("Gripper Fault : ", "Minor Fault: Changing mode fault, interference detected on Scissor (for less than 20 sec) (0x0A)")
  	elif (fault_status == 11):
  		textmsg("Gripper Fault : ", "Minor Fault: Automatic release in progress (0x0B)")
  	elif (fault_status == 13):
  		textmsg("Gripper Fault : ", "Major Fault: Activation fault, verify that no interference or other error occurred (0x0D)")
  	elif (fault_status == 14):
  		textmsg("Gripper Fault : ", "Major Fault: Changing mode fault, interference detected on Scissor (for more than 20 sec) (0x0E)")
  	elif (fault_status == 15):
  		textmsg("Gripper Fault : ", "Major Fault: Automatic release completed. Reset and activation is required (0x0F)")
  	else:
  		textmsg("Gripper Fault : ", "Unkwown Fault")
  	end
  end
  
  # sets the gripper inputs
  global current_force = 0
  global current_speed = 0
  def rq_set_var(name, value):
  	
  	if (name == rACT):
          MOD = rq_get_var(gMOD)
          GTO = rq_get_var(gGTO)
          modbus_set_output_register("gripper_O0", 256 * (rACT * value + rMOD * MOD + rGTO * GTO), False)
  	elif (name == rMOD):
          ACT = rq_get_var(gACT)
          GTO = rq_get_var(gGTO)
          modbus_set_output_register("gripper_O0", 256 * (rACT * ACT + rMOD * value + rGTO * GTO), False)
  	elif (name == rGTO):
          ACT = rq_get_var(gACT)
          MOD = rq_get_var(gMOD)
         	modbus_set_output_register("gripper_O0", 256 * (rACT * ACT + rMOD * MOD + rGTO * value), False)
  	elif (name == rATR):
          ACT = rq_get_var(gACT)
          MOD = rq_get_var(gMOD)
          GTO = rq_get_var(gGTO)
         	modbus_set_output_register("gripper_O0", 256 * (rACT * ACT + rMOD * MOD + rGTO * GTO + rATR * value), False)
  	elif (name == rFOR):
          current_force = value
          modbus_set_output_register("gripper_O2", (256 * current_speed + value), False)
  	elif (name == rSPE):
          current_speed = value
         	modbus_set_output_register("gripper_O2", (256 * value + current_force), False)
  	elif (name == rPOS):
          modbus_set_output_register("gripper_O1", value, False)
      else:
      end
  
      sync()
  end
  
  # reads the gripper outputs
  def rq_get_var(name, nbr_bytes=0):
      if (name == gACT):
          reg = integer_to_binary_list(modbus_get_signal_status("gripper_I0", False))
          value = binary_list_to_integer([reg[gACT]])
      elif (name == gMOD):
          reg = integer_to_binary_list(modbus_get_signal_status("gripper_I0", False))
          value = binary_list_to_integer([reg[gMOD1], reg[gMOD2]])
      elif (name == gGTO):
          reg = integer_to_binary_list(modbus_get_signal_status("gripper_I0", False))
          value = binary_list_to_integer([reg[gGTO]])
      elif (name == gSTA):
          reg = integer_to_binary_list(modbus_get_signal_status("gripper_I0", False))
          value = binary_list_to_integer([reg[gSTA1], reg[gSTA2]])
      elif (name == gIMC):
          reg = integer_to_binary_list(modbus_get_signal_status("gripper_I0", False))
          value = binary_list_to_integer([reg[gIMC1], reg[gIMC2]])
      elif (name == gFLT):
          reg = integer_to_binary_list(modbus_get_signal_status("gripper_I1", False))
          value = binary_list_to_integer([reg[gFLT1], reg[gFLT2], reg[gFLT3], reg[gFLT4]])
      elif (name == gPRE):
          reg = modbus_get_signal_status("gripper_I1", False)
          value = reg % 256
      else:
     	    value = 0
      end
       
      sync()
  
      return value
  end
  $ 4 "rq_force≔0"
  global rq_force = 0
  varmsg("rq_force",rq_force)
  $ 5 "rq_speed≔255"
  global rq_speed = 255
  varmsg("rq_speed",rq_speed)
  $ 6 "Robot Program"
  $ 7 "'This program moves the robot to an object.'"
  # 'This program moves the robot to an object.'
  $ 8 "'It then picks it and moves it to another'"
  # 'It then picks it and moves it to another'
  $ 9 "'location.'"
  # 'location.'
  $ 10 "Call SubP_rq_set_force"
  SubP_rq_set_force()
  $ 11 "Call SubP_rq_set_speed"
  SubP_rq_set_speed()
  $ 12 "Call SubP_rq_activate_and_wait"
  SubP_rq_activate_and_wait()
  $ 13 "Call SubP_rq_open_and_wait"
  SubP_rq_open_and_wait()
  $ 14 "MoveJ"
  $ 15 "home"
  movej([-1.6006999999398126, -1.528921288779294, -2.0181296811810623, -1.1910490300381833, 1.5951000000015658, -0.030999999939817117], a=1.3962634015954636, v=1.0471975511965976)
  $ 16 "approach_1"
  movej([-1.6007000000085159, -1.7659521649108934, -2.22102184846804, -0.7511259866212682, 1.595099999999778, -0.031000000008515508], a=1.3962634015954636, v=1.0471975511965976)
  $ 17 "MoveJ"
  $ 18 "pick"
  movej([-1.6007000000314733, -1.8830016222911008, -2.2580643600607413, -0.5970340176489192, 1.5950999999991808, -0.031000000031471277], a=1.3962634015954636, v=1.0471975511965976)
  $ 19 "Call SubP_rq_close_and_wait"
  SubP_rq_close_and_wait()
  $ 20 "approach_1"
  movej([-1.6007000000085159, -1.7659521649108934, -2.22102184846804, -0.7511259866212682, 1.595099999999778, -0.031000000008515508], a=1.3962634015954636, v=1.0471975511965976)
  $ 21 "MoveJ"
  $ 22 "home"
  movej([-1.6006999999398126, -1.528921288779294, -2.0181296811810623, -1.1910490300381833, 1.5951000000015658, -0.030999999939817117], a=1.3962634015954636, v=1.0471975511965976)
  $ 23 "Call SubP_rq_is_object_detected"
  SubP_rq_is_object_detected()
  $ 24 "If  not rq_is_object_detected()"
  if (  not  rq_is_object_detected()):
    $ 25 "Halt"
    halt
    $ 26 "'No object detected. Manage the case.'"
    # 'No object detected. Manage the case.'
  end
  $ 27 "MoveJ"
  $ 28 "approach_2"
  movej([-1.6190467549235632, -1.3921485012994121, -2.617305330052914, -0.7290876484350678, 1.5946242773145027, -0.04934589898134843], a=1.3962634015954636, v=1.0471975511965976)
  $ 29 "MoveJ"
  $ 30 "place"
  movej([-1.619046754956981, -1.575219860566658, -2.6713511436549506, -0.4919704755665832, 1.594624277313637, -0.049345899014764535], a=1.3962634015954636, v=1.0471975511965976)
  $ 31 "Call SubP_rq_open_and_wait"
  SubP_rq_open_and_wait()
  $ 32 "approach_2"
  movej([-1.6190467549235632, -1.3921485012994121, -2.617305330052914, -0.7290876484350678, 1.5946242773145027, -0.04934589898134843], a=1.3962634015954636, v=1.0471975511965976)
  $ 33 "MoveJ"
  $ 34 "home"
  movej([-1.6006999999398126, -1.528921288779294, -2.0181296811810623, -1.1910490300381833, 1.5951000000015658, -0.030999999939817117], a=1.3962634015954636, v=1.0471975511965976)
end
