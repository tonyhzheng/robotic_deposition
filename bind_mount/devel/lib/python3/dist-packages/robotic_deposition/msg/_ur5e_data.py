# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotic_deposition/ur5e_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ur5e_data(genpy.Message):
  _md5sum = "273f5ae00ca10a4d616012f38fd5c175"
  _type = "robotic_deposition/ur5e_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Float64MultiArray joint_angles
std_msgs/Float64MultiArray joint_velocities
std_msgs/Float64MultiArray tcp_pose
std_msgs/Float64MultiArray tcp_speed
std_msgs/Float64MultiArray tcp_force
std_msgs/Float64  time
std_msgs/Bool is_steady
================================================================================
MSG: std_msgs/Float64MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float64[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/Bool
bool data"""
  __slots__ = ['joint_angles','joint_velocities','tcp_pose','tcp_speed','tcp_force','time','is_steady']
  _slot_types = ['std_msgs/Float64MultiArray','std_msgs/Float64MultiArray','std_msgs/Float64MultiArray','std_msgs/Float64MultiArray','std_msgs/Float64MultiArray','std_msgs/Float64','std_msgs/Bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_angles,joint_velocities,tcp_pose,tcp_speed,tcp_force,time,is_steady

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ur5e_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_angles is None:
        self.joint_angles = std_msgs.msg.Float64MultiArray()
      if self.joint_velocities is None:
        self.joint_velocities = std_msgs.msg.Float64MultiArray()
      if self.tcp_pose is None:
        self.tcp_pose = std_msgs.msg.Float64MultiArray()
      if self.tcp_speed is None:
        self.tcp_speed = std_msgs.msg.Float64MultiArray()
      if self.tcp_force is None:
        self.tcp_force = std_msgs.msg.Float64MultiArray()
      if self.time is None:
        self.time = std_msgs.msg.Float64()
      if self.is_steady is None:
        self.is_steady = std_msgs.msg.Bool()
    else:
      self.joint_angles = std_msgs.msg.Float64MultiArray()
      self.joint_velocities = std_msgs.msg.Float64MultiArray()
      self.tcp_pose = std_msgs.msg.Float64MultiArray()
      self.tcp_speed = std_msgs.msg.Float64MultiArray()
      self.tcp_force = std_msgs.msg.Float64MultiArray()
      self.time = std_msgs.msg.Float64()
      self.is_steady = std_msgs.msg.Bool()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joint_angles.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_angles.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.joint_angles.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.joint_angles.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_angles.data))
      length = len(self.joint_velocities.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_velocities.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.joint_velocities.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.joint_velocities.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_velocities.data))
      length = len(self.tcp_pose.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.tcp_pose.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.tcp_pose.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.tcp_pose.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tcp_pose.data))
      length = len(self.tcp_speed.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.tcp_speed.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.tcp_speed.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.tcp_speed.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tcp_speed.data))
      length = len(self.tcp_force.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.tcp_force.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.tcp_force.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.tcp_force.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tcp_force.data))
      _x = self
      buff.write(_get_struct_dB().pack(_x.time.data, _x.is_steady.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_angles is None:
        self.joint_angles = std_msgs.msg.Float64MultiArray()
      if self.joint_velocities is None:
        self.joint_velocities = std_msgs.msg.Float64MultiArray()
      if self.tcp_pose is None:
        self.tcp_pose = std_msgs.msg.Float64MultiArray()
      if self.tcp_speed is None:
        self.tcp_speed = std_msgs.msg.Float64MultiArray()
      if self.tcp_force is None:
        self.tcp_force = std_msgs.msg.Float64MultiArray()
      if self.time is None:
        self.time = std_msgs.msg.Float64()
      if self.is_steady is None:
        self.is_steady = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_angles.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.joint_angles.layout.dim.append(val1)
      start = end
      end += 4
      (self.joint_angles.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_angles.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_velocities.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.joint_velocities.layout.dim.append(val1)
      start = end
      end += 4
      (self.joint_velocities.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_velocities.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tcp_pose.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.tcp_pose.layout.dim.append(val1)
      start = end
      end += 4
      (self.tcp_pose.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tcp_pose.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tcp_speed.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.tcp_speed.layout.dim.append(val1)
      start = end
      end += 4
      (self.tcp_speed.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tcp_speed.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tcp_force.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.tcp_force.layout.dim.append(val1)
      start = end
      end += 4
      (self.tcp_force.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tcp_force.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.time.data, _x.is_steady.data,) = _get_struct_dB().unpack(str[start:end])
      self.is_steady.data = bool(self.is_steady.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joint_angles.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_angles.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.joint_angles.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.joint_angles.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_angles.data.tostring())
      length = len(self.joint_velocities.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_velocities.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.joint_velocities.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.joint_velocities.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_velocities.data.tostring())
      length = len(self.tcp_pose.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.tcp_pose.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.tcp_pose.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.tcp_pose.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tcp_pose.data.tostring())
      length = len(self.tcp_speed.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.tcp_speed.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.tcp_speed.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.tcp_speed.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tcp_speed.data.tostring())
      length = len(self.tcp_force.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.tcp_force.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.tcp_force.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.tcp_force.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tcp_force.data.tostring())
      _x = self
      buff.write(_get_struct_dB().pack(_x.time.data, _x.is_steady.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_angles is None:
        self.joint_angles = std_msgs.msg.Float64MultiArray()
      if self.joint_velocities is None:
        self.joint_velocities = std_msgs.msg.Float64MultiArray()
      if self.tcp_pose is None:
        self.tcp_pose = std_msgs.msg.Float64MultiArray()
      if self.tcp_speed is None:
        self.tcp_speed = std_msgs.msg.Float64MultiArray()
      if self.tcp_force is None:
        self.tcp_force = std_msgs.msg.Float64MultiArray()
      if self.time is None:
        self.time = std_msgs.msg.Float64()
      if self.is_steady is None:
        self.is_steady = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_angles.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.joint_angles.layout.dim.append(val1)
      start = end
      end += 4
      (self.joint_angles.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_angles.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_velocities.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.joint_velocities.layout.dim.append(val1)
      start = end
      end += 4
      (self.joint_velocities.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_velocities.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tcp_pose.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.tcp_pose.layout.dim.append(val1)
      start = end
      end += 4
      (self.tcp_pose.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tcp_pose.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tcp_speed.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.tcp_speed.layout.dim.append(val1)
      start = end
      end += 4
      (self.tcp_speed.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tcp_speed.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tcp_force.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.tcp_force.layout.dim.append(val1)
      start = end
      end += 4
      (self.tcp_force.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tcp_force.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.time.data, _x.is_steady.data,) = _get_struct_dB().unpack(str[start:end])
      self.is_steady.data = bool(self.is_steady.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_dB = None
def _get_struct_dB():
    global _struct_dB
    if _struct_dB is None:
        _struct_dB = struct.Struct("<dB")
    return _struct_dB
