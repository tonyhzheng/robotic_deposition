// Generated by gencpp from file robotic_deposition/ur5e_data.msg
// DO NOT EDIT!


#ifndef ROBOTIC_DEPOSITION_MESSAGE_UR5E_DATA_H
#define ROBOTIC_DEPOSITION_MESSAGE_UR5E_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Bool.h>

namespace robotic_deposition
{
template <class ContainerAllocator>
struct ur5e_data_
{
  typedef ur5e_data_<ContainerAllocator> Type;

  ur5e_data_()
    : joint_angles()
    , joint_velocities()
    , tcp_pose()
    , tcp_speed()
    , tcp_force()
    , time()
    , is_steady()  {
    }
  ur5e_data_(const ContainerAllocator& _alloc)
    : joint_angles(_alloc)
    , joint_velocities(_alloc)
    , tcp_pose(_alloc)
    , tcp_speed(_alloc)
    , tcp_force(_alloc)
    , time(_alloc)
    , is_steady(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _joint_angles_type;
  _joint_angles_type joint_angles;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _joint_velocities_type;
  _joint_velocities_type joint_velocities;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _tcp_pose_type;
  _tcp_pose_type tcp_pose;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _tcp_speed_type;
  _tcp_speed_type tcp_speed;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _tcp_force_type;
  _tcp_force_type tcp_force;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _time_type;
  _time_type time;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _is_steady_type;
  _is_steady_type is_steady;





  typedef boost::shared_ptr< ::robotic_deposition::ur5e_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotic_deposition::ur5e_data_<ContainerAllocator> const> ConstPtr;

}; // struct ur5e_data_

typedef ::robotic_deposition::ur5e_data_<std::allocator<void> > ur5e_data;

typedef boost::shared_ptr< ::robotic_deposition::ur5e_data > ur5e_dataPtr;
typedef boost::shared_ptr< ::robotic_deposition::ur5e_data const> ur5e_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotic_deposition::ur5e_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotic_deposition::ur5e_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotic_deposition::ur5e_data_<ContainerAllocator1> & lhs, const ::robotic_deposition::ur5e_data_<ContainerAllocator2> & rhs)
{
  return lhs.joint_angles == rhs.joint_angles &&
    lhs.joint_velocities == rhs.joint_velocities &&
    lhs.tcp_pose == rhs.tcp_pose &&
    lhs.tcp_speed == rhs.tcp_speed &&
    lhs.tcp_force == rhs.tcp_force &&
    lhs.time == rhs.time &&
    lhs.is_steady == rhs.is_steady;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotic_deposition::ur5e_data_<ContainerAllocator1> & lhs, const ::robotic_deposition::ur5e_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotic_deposition

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotic_deposition::ur5e_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotic_deposition::ur5e_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotic_deposition::ur5e_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotic_deposition::ur5e_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotic_deposition::ur5e_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotic_deposition::ur5e_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotic_deposition::ur5e_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "273f5ae00ca10a4d616012f38fd5c175";
  }

  static const char* value(const ::robotic_deposition::ur5e_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x273f5ae00ca10a4dULL;
  static const uint64_t static_value2 = 0x616012f38fd5c175ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotic_deposition::ur5e_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotic_deposition/ur5e_data";
  }

  static const char* value(const ::robotic_deposition::ur5e_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotic_deposition::ur5e_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64MultiArray joint_angles\n"
"std_msgs/Float64MultiArray joint_velocities\n"
"std_msgs/Float64MultiArray tcp_pose\n"
"std_msgs/Float64MultiArray tcp_speed\n"
"std_msgs/Float64MultiArray tcp_force\n"
"std_msgs/Float64  time\n"
"std_msgs/Bool is_steady\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::robotic_deposition::ur5e_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotic_deposition::ur5e_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_angles);
      stream.next(m.joint_velocities);
      stream.next(m.tcp_pose);
      stream.next(m.tcp_speed);
      stream.next(m.tcp_force);
      stream.next(m.time);
      stream.next(m.is_steady);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ur5e_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotic_deposition::ur5e_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotic_deposition::ur5e_data_<ContainerAllocator>& v)
  {
    s << indent << "joint_angles: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_angles);
    s << indent << "joint_velocities: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_velocities);
    s << indent << "tcp_pose: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.tcp_pose);
    s << indent << "tcp_speed: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.tcp_speed);
    s << indent << "tcp_force: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.tcp_force);
    s << indent << "time: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.time);
    s << indent << "is_steady: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.is_steady);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTIC_DEPOSITION_MESSAGE_UR5E_DATA_H
